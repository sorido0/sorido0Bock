---
export interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description">
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<meta name="view-transition" content="same-origin">
	</head>
	<body>
		<slot />
	</body>
</html>
<style is:global>
	:root {
		--accent: 124, 58, 237;
		--accent-gradient: linear-gradient(45deg, rgb(var(--accent)), #da62c4 30%, white 60%);
	}
	html {
		font-family: system-ui, sans-serif;
		background-color: #F6F6F6;
	}
	code {
		font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
			Bitstream Vera Sans Mono, Courier New, monospace;
	}
</style>

<script>
 if (document.startViewTransition) {
	window.navigation.addEventListener('navigate', (event) =>{
		// capturamos la url de destino
		const toUrl = new URL(event.destination.url);
		
		// Es una pagina externa?, si es asi, no hacemos nada
		if (location.origin !== toUrl.origin) return; 

		// Si la pagina es de mi dominio, entonces la la interceptamos
		event.intercept({
			async handler () {
				// 1- Cargar la pagina de destino
				// 2- ulitizar un fecth para obtener el html
				const response = await fetch(toUrl.pathname);
				const text = await response.text();
				// 3- obtenemos el contenido del body donde solo usaremos lo que esta dentro 
				// 4- usaremos regex para obtener el body
				const [, data] = text.match(/<body>([\s\S]*)<\/body>/i);

				// 5- Utilizamos la api de View Transition para hacer la transicion API
				document.startViewTransition( () => {

					// 6- Como tiene  que actulizar la vista 
					document.body.innerHTML = data;
					// 7- hacemos la transicion
					document.documentElement.scrollTop = 0;
					
				})
			}
		})
	})
 }

</script>
